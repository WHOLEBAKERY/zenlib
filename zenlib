-- ZenScript Library v2
-- Fully functional UI with theme and tabs
local Library = {}

-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UIS = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")

-- Theme
Library.Theme = {
    Background = Color3.fromRGB(0, 0, 0),
    BackgroundTransparency = 0.6,
    Accent = Color3.fromRGB(37, 99, 235),
    TextColor = Color3.fromRGB(255, 255, 255),
    Font = Enum.Font.GothamBold
}

-- Drag function
function Library:Drag(frame, parent)
    local dragging = false
    local dragInput, dragStart, startPos
    local function update(input)
        local delta = input.Position - dragStart
        parent.Position = UDim2.new(
            startPos.X.Scale,
            startPos.X.Offset + delta.X,
            startPos.Y.Scale,
            startPos.Y.Offset + delta.Y
        )
    end

    frame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = parent.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    frame.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)

    UIS.InputChanged:Connect(function(input)
        if dragging and input == dragInput then
            update(input)
        end
    end)
end

-- Create Window
function Library:Window(title)
    title = title or "ZenScript"

    local player = Players.LocalPlayer
    local playerGui = player:WaitForChild("PlayerGui")

    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "ZenScriptUI"
    screenGui.Parent = playerGui

    -- Main window
    local window = Instance.new("Frame")
    window.Name = "MainWindow"
    window.Size = UDim2.new(0, 400, 0, 300)
    window.Position = UDim2.new(0.5, -200, 0.5, -150)
    window.BackgroundColor3 = Library.Theme.Background
    window.BackgroundTransparency = Library.Theme.BackgroundTransparency
    window.BorderSizePixel = 0
    window.Parent = screenGui

    -- Rounded corners
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 12)
    corner.Parent = window

    -- Top bar
    local topBar = Instance.new("Frame")
    topBar.Size = UDim2.new(1, 0, 0, 40)
    topBar.BackgroundColor3 = Library.Theme.Background
    topBar.BackgroundTransparency = 0
    topBar.Parent = window

    local topCorner = Instance.new("UICorner")
    topCorner.CornerRadius = UDim.new(0, 12)
    topCorner.Parent = topBar

    -- Title
    local titleLabel = Instance.new("TextLabel")
    titleLabel.Text = title
    titleLabel.Font = Library.Theme.Font
    titleLabel.TextColor3 = Library.Theme.TextColor
    titleLabel.TextSize = 20
    titleLabel.BackgroundTransparency = 1
    titleLabel.Size = UDim2.new(1, -10, 1, 0)
    titleLabel.Position = UDim2.new(0, 10, 0, 0)
    titleLabel.Parent = topBar

    -- Dragging
    Library:Drag(topBar, window)

    -- Tabs
    local tabContainer = Instance.new("Frame")
    tabContainer.Size = UDim2.new(1, 0, 1, -40)
    tabContainer.Position = UDim2.new(0, 0, 0, 40)
    tabContainer.BackgroundTransparency = 1
    tabContainer.Parent = window

    local tabs = {}
    local function CreateTab(tabName)
        local tabButton = Instance.new("TextButton")
        tabButton.Text = tabName
        tabButton.Font = Library.Theme.Font
        tabButton.TextColor3 = Library.Theme.TextColor
        tabButton.BackgroundColor3 = Library.Theme.Accent
        tabButton.Size = UDim2.new(0, 100, 0, 30)
        tabButton.Position = UDim2.new(#tabs * 0.25, 10, 0, 5)
        tabButton.Parent = topBar

        -- Content
        local content = Instance.new("ScrollingFrame")
        content.Size = UDim2.new(1, 0, 1, 0)
        content.BackgroundTransparency = 1
        content.Parent = tabContainer
        content.Visible = (#tabs==0) -- first tab visible
        content.CanvasSize = UDim2.new(0, 0, 0, 0)
        content.AutomaticCanvasSize = Enum.AutomaticSize.Y

        tabButton.MouseButton1Click:Connect(function()
            for _, t in pairs(tabs) do
                t.Content.Visible = false
            end
            content.Visible = true
        end)

        local layout = Instance.new("UIListLayout")
        layout.Padding = UDim.new(0, 10)
        layout.Parent = content

        local TabData = {}
        TabData.Button = tabButton
        TabData.Content = content

        -- Create button
        function TabData:CreateButton(text, callback)
            local btn = Instance.new("TextButton")
            btn.Text = text
            btn.Font = Library.Theme.Font
            btn.TextColor3 = Library.Theme.TextColor
            btn.BackgroundColor3 = Library.Theme.Accent
            btn.Size = UDim2.new(1, -20, 0, 30)
            btn.Parent = content
            btn.MouseButton1Click:Connect(callback)
        end

        -- Create toggle
        function TabData:CreateToggle(text, callback)
            local frame = Instance.new("Frame")
            frame.Size = UDim2.new(1, -20, 0, 30)
            frame.BackgroundTransparency = 1
            frame.Parent = content

            local label = Instance.new("TextLabel")
            label.Text = text
            label.Font = Library.Theme.Font
            label.TextColor3 = Library.Theme.TextColor
            label.Size = UDim2.new(0.8, 0, 1, 0)
            label.BackgroundTransparency = 1
            label.Parent = frame

            local toggle = Instance.new("TextButton")
            toggle.Size = UDim2.new(0.2, -5, 1, -5)
            toggle.Position = UDim2.new(0.8, 5, 0, 0)
            toggle.BackgroundColor3 = Library.Theme.Accent
            toggle.Text = "OFF"
            toggle.Font = Library.Theme.Font
            toggle.TextColor3 = Library.Theme.TextColor
            toggle.Parent = frame

            local state = false
            toggle.MouseButton1Click:Connect(function()
                state = not state
                toggle.Text = state and "ON" or "OFF"
                callback(state)
            end)
        end

        table.insert(tabs, TabData)
        return TabData
    end

    Library.CreateTab = CreateTab
    Library.MainWindow = window
    return Library
end

-- Toggle UI function
function Library:ToggleUI()
    if self.MainWindow then
        self.MainWindow.Visible = not self.MainWindow.Visible
    end
end

return Library
